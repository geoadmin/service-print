
    log_format bodylog '$remote_addr - $remote_user [$time_local] '
       '"$request" $status $body_bytes_sent '
       '"$http_referer" "$http_user_agent" $request_time '
       '\n\n"$req_headers" \n"$req_body" \n>"$resp_body"';

server {
   listen    ${NGINX_PORT};
   server_name  localhost;

   #charset koi8-r;
   access_log  /var/log/host.access.log  bodylog;
    

   lua_need_request_body on;

   set $resp_body "";
   set $req_body "";
   set $req_headers "";

   client_body_buffer_size 16k;
   client_max_body_size 16k;

   rewrite_by_lua_block {
       local req_headers = "Headers: ";
       ngx.var.req_body = ngx.req.get_body_data();
       local h, err = ngx.req.get_headers()
       for k, v in pairs(h) do
           req_headers = req_headers .. k .. ": " .. v .. "\n";
       end

       ngx.var.req_headers = req_headers;
   }

   body_filter_by_lua '
   local resp_body = string.sub(ngx.arg[1], 1, 1000)
   ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
   if ngx.arg[2] then
     ngx.var.resp_body = ngx.ctx.buffered
   end
   ';

   location / {
         root   /usr/local/openresty/nginx/html;
         index  index.html index.htm;
    }

    location /example {
        default_type 'text/plain';

        content_by_lua_block {
            ngx.say('Hello, Sammy!')
        }
    }

            #error_page  404              /404.html;

                # redirect server error pages to the static page /50x.html
                    #
                        error_page   500 502 503 504  /50x.html;
                        location = /50x.html {
                                root   /usr/local/openresty/nginx/html;
                                    
                        }

}
