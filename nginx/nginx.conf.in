user www-data;

# should be equal to the number of process on the host machine
worker_processes 8;

error_log /dev/stdout debug;


events {
  worker_connections 10000;
  accept_mutex on;
}

http {
  include       mime.types;
  default_type  application/octet-stream;
  # if we use analytics we may want to turn that off
  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';
  #access_log  logs/access.log  main;


  log_format bodylog '$remote_addr - $remote_user [$time_local] '
      '"$request" $status $body_bytes_sent '
      '"$http_referer" "$http_user_agent" $request_time '
      '\n\n"$req_headers" \n"$req_body" \n>"$resp_body"';
  
  access_log /dev/stdout bodylog;
  # access_log  /var/log/host.access.log  bodylog;
  sendfile off;

  # this removes the "host_header" related issue
  underscores_in_headers on;

  # Max request size. Vector layer may be quite large.
  # Default is 1M. Empirical value, 50M is enough to print 100'000 points/coordinates
  # Was unlimited on Apache
  
  client_max_body_size 50M;


  # Apache/Nginx                                   WSGI                            Tomcat
  #
  # GET  /print/info.json                                                        GET /service-print-main/pdf/info.json
  #
  # POST /print/create.json                                                      POST /service-print-main/pdf/create.json
  #
  # POST /printmulti/create.json             POST /printmulti/create.json
  #
  # GET  /printprogress?id=232323            GET /printprogress?id=232323
  #
  # GET  /printcancel                        GET /printcancel
  #
  # GET /print/-multi23444545.pdf.printout
  # GET /print/9032936254995330149.pdf.printout
  # static to /var/local/print/mapfish-print9032936254995330149.pdf.printout

  # proxying tomcat
  server {
    listen ${NGINX_PORT};
    #server_name service-print.${PRINT_ENV}.bgdi.ch;

    root /var/local/print;

   lua_need_request_body on;

   set $resp_body "";
   set $req_body "";
   set $req_headers "";

   client_body_buffer_size 16k;

   rewrite_by_lua_block {
       local req_headers = "Headers: ";
       ngx.var.req_body = ngx.req.get_body_data();
       local h, err = ngx.req.get_headers()
       for k, v in pairs(h) do
           req_headers = req_headers .. k .. ": " .. v .. "\n";
       end

       ngx.var.req_headers = req_headers;
   }

   body_filter_by_lua '
       local resp_body = string.sub(ngx.arg[1], 1, 1000)
       ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
       if ngx.arg[2] then
         ngx.var.resp_body = ngx.ctx.buffered
       end
   ';

   location /example {
        default_type 'text/plain';

        content_by_lua_block {
            ngx.say('Hello, Sammy!')
        }
    }

    location ~ /[0-9]+/print/ {
      rewrite ^/[0-9]+/print/(.*) /print/$1;
    }

    # PDF download
    location ~  /mapfish-print-multi(\d+)\.pdf\.printout$ {
        types {
          application/pdf        printout;
        }
        expires 1h;
        add_header Cache-Control "public";
        add_header Content-Disposition "attachment; filename=map.geo.admin.ch_$1.pdf" always;
        break;
    }

    location ~  ^/mapfish-print(\d+)\.pdf\.printout$ {

      types {
          application/pdf        printout;
      }
      expires 1h;
      add_header Cache-Control "public";
      add_header Content-Disposition "attachment; filename=map.geo.admin.ch_$1.pdf" always;
      break;
    }

    location ~  ^/print/[0-9]+\.pdf\.printout$ {

      rewrite ^/print(proxy)?/(\-multi)?([0-9]+\.pdf\.printout)$ /mapfish-print$2$3;
    }


    location  /print/ {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

      # Do not cache anything
      expires off;

      proxy_pass http://localhost:${TOMCAT_PORT}/service-print-main/pdf/;
    }
    # For migration
    location /service-print-main/ {
      # Do not cache anything
      expires off;

      proxy_pass http://localhost:${TOMCAT_PORT}/service-print-main/;
    }

    # proxying wsgi

    location  /printmulti/ {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
      # Do not cache anything
      expires off;

      proxy_pass http://localhost:${WSGI_PORT}/printmulti/;
    }
    location  /printprogress {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
      # Do not cache anything
      expires off;

      proxy_pass http://localhost:${WSGI_PORT}/printprogress;
    }
    location  /printcancel {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
      # Do not cache anything
      expires off;

      proxy_pass http://localhost:${WSGI_PORT}/printcancel;
    }


    location /nginx-status {
      # Turn on nginx stats
      stub_status on;

      # I do not need logs for stats
      access_log   off;

      # Allow access from localhost
      allow 127.0.0.1;
      # Security: Only allow access from vpc #
      allow 10.220.0.0/21;
      # Send rest of the world to /dev/null #
      deny all;
    }

    location /checker {
      access_log   off;
      add_header Content-Type text/plain;
      return 200 'OK';
    }
    location /tomcat_checker {
      expires off;
      proxy_pass http://localhost:${TOMCAT_PORT}/service-print-main/checker;
    }
    location /wsgi_checker {
      expires off;
      proxy_pass http://localhost:${WSGI_PORT}/checker;
    }
    location /backend_checker {
      expires off;
      proxy_pass http://localhost:${WSGI_PORT}/backend_checker;
    }
  }
}
